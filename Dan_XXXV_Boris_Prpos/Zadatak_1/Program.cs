using System;
using System.Collections.Generic;
using System.Threading;

namespace Zadatak_1
{
    class Program
    {
        //static elements that will be shared between threads
        static List<Thread> threadList = new List<Thread>();
        static int numberToGuess = 0;
        //object will be used for locking with Monitor
        static readonly object countLock = new object();

        static void Main(string[] args)
        {
            //generating and creating first thread
            Thread tFirst = new Thread(() => Start());
            tFirst.Start();
            tFirst.Join();
            
            Console.ReadLine();
        }
        /// <summary>
        /// Method that runs all threads
        /// </summary>
        static void Start()
        {
            //asking for user input and validating (target number)
            Console.WriteLine("Welcome!\nEnter number to guess (1-100):");
            bool tryNumber = Int32.TryParse(Console.ReadLine(), out numberToGuess);
            while (!tryNumber || numberToGuess<1 || numberToGuess>100)
            {
                Console.WriteLine("Please enter number between 1 and 100");
                tryNumber = Int32.TryParse(Console.ReadLine(), out numberToGuess);
            }
            //asking for user input and validating (number of users that will participate in guessing)
            Console.WriteLine("Enter how many users will guess:");
            int numberOfUsers;
            bool tryUsers = Int32.TryParse(Console.ReadLine(), out numberOfUsers);
            while (!tryUsers || numberOfUsers<1 )
            {
                Console.WriteLine("Please enter number greater than 0");
                tryUsers = Int32.TryParse(Console.ReadLine(), out numberOfUsers);
            }
            //Initializing Thread_Generator that will create threads (threads that will be guessing)
            Thread Thread_Generator = new Thread(() => CreateThreads(numberOfUsers));
            //starting Thread_Generator
            Thread_Generator.Start();
            //message that will be displayed by first thread
            Console.WriteLine("There will be {0} users, and number to guess is also set.\n",numberOfUsers);
            //waiting to finish
            Thread_Generator.Join();
            //starting every thread that was generated by Thread_Generator
            for (int i = 0; i < threadList.Count; i++)
            {
                Thread.Sleep(100);
                threadList[i].Start();
            }
        }
        /// <summary>
        /// Method that creates new threads, this method will be passed to Thread_Generator
        /// </summary>
        /// <param name="num"></param>
        static void CreateThreads (int num)
        {
            // 'num' is number of threads taken from user input
            for (int i = 0; i < num; i++)
            {
                //creating threads and giving them name
                Thread t = new Thread(new ThreadStart(()=>GuessNumber(Thread.CurrentThread)))
                {
                    Name = String.Format("Participant_" + i)
                };
                //adding threads into static list
                threadList.Add(t);
            }
        }
        /// <summary>
        /// Method that checks if random number generated from thread is same as target number
        /// </summary>
        /// <param name="t"></param>
        static void GuessNumber(Thread t)
        {
            bool guessed = true;
            Random rnd = new Random();

            while (guessed==true)
            {
                //locking with monitor and setting thread to sleep
                Monitor.Enter(countLock);
                Thread.Sleep(100);
                //generating random number (1-100)
                int num = rnd.Next(1, 101);
                //displaying what user tried to guess
                Console.WriteLine("{0} tried to guess with number:{1}", t.Name, num);
                //if parity is guessed (both odd or both even)
                if ((numberToGuess % 2 == 0 && num % 2 == 0) || (numberToGuess % 2 == 1 && num % 2 == 1))
                {
                    Console.WriteLine("\tParity is guessed!\n");
                }
                //in case that thread generated random number and it is the same as target number
                if (num == numberToGuess)
                {
                    Console.WriteLine("{0} has won, and target number was:{1}", t.Name, numberToGuess);
                    guessed = false;
                }
                //only if number is not guessed => monitor.exit, in other words=> when someone guesses it stays locked and no one has acces
                if (num != numberToGuess)
                {
                    Monitor.Exit(countLock);
                }
            }
        }

    }
}
